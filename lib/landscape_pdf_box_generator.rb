require "prawn"
require "prawn/measurement_extensions"
require "prawn_shapes"
require 'yaml'

EIGHTH_INCH = 0.125.in
QUARTER_INCH = 0.25.in
THREE_QUARTER_INCH = 0.75.in
ONE_INCH = 1.in
ONE_CENTIMETER = 1.cm

data = YAML.load_file ARGV[0]
# change page layout from string to symbol
data['box']['page_layout'] = data['box']['page_layout'].to_sym

text =<<-EOT
  This tuckbox was generated by software written by Michael King.
  Source code is available at http://github.com/kingmt/tuckbox_generator and is licensed under the GPL

  This implementation is inspired by the generator written by Craig P. Forbes at http://www.cpforbes.net/tuckbox.

  The box is based on a design by Elliott C. Evans. See his page, http://www.ee0r.com/boxes/ for more information and assembly instructions.

  Go to
  http://www.tuckbox-generator.net to generate more box templates.
  --Michael
  EOT

height = data['box']['height']
width = data['box']['width']
thickness = data['box']['thickness']
if thickness > width
  # need to flip them
  width = data['box']['thickness']
  thickness = data['box']['width']
end
unit = data['box']['unit']

info_data = { 'faces' => {
                'dimensions' => {
                  'font_size' => 10,
                  'text' => "#{width}#{unit} x #{height}#{unit} x #{thickness}#{unit}"
                },
                'url' => {
                  'text' => 'http://www.tuckbox-generator.net',
                  'text_orientation' => 'sideways_left',
                  'font_size' => 5,
                  'text_align' => 'left',
                  'text_valign' => 'top'
                },
                'credits' => {
                  'text' => text,
                  'font_size' => 10,
                  'text_align' => 'left',
                  'text_valign' => 'top'
                }
              },
              'box' => {'bottom_style' => data['box']['bottom_style']},
              'debug_points' => data['debug_points']
            }

measurements = { points: [],
                 widths: {},
                 heights: {},
                 cut_lines: [],
                 fold_lines: [],
                 glue_boxes: [],
                 reverse_points: [],
                 reverse_cut_lines: [],
                 face_points: {},
                 tuck_flap_masks: {}
               }
if unit == 'mm'
  measurements[:height_in_points] = height.send :mm
  measurements[:width_in_points] = width.send :mm
  measurements[:thickness_in_points] = thickness.send :mm
else
  measurements[:height_in_points] = height.send :in
  measurements[:width_in_points] = width.send :in
  measurements[:thickness_in_points] = thickness.send :in
end

right_margin = 720
measurements[:flap_height] = if measurements[:thickness_in_points] > THREE_QUARTER_INCH
                               THREE_QUARTER_INCH
                             elsif measurements[:thickness_in_points] < QUARTER_INCH
                               QUARTER_INCH
                             else
                               measurements[:thickness_in_points]/2
                             end
measurements[:tuck_flap_height] = if measurements[:thickness_in_points] > THREE_QUARTER_INCH
                                    THREE_QUARTER_INCH
                                  else
                                    measurements[:thickness_in_points] - 5
                                  end
bounding_box_width = measurements[:width_in_points]*2 + measurements[:thickness_in_points]*3
bounding_box_height = if data['box']['bottom_style'] == 'glued'
                        measurements[:thickness_in_points]*2 + measurements[:flap_height] + measurements[:height_in_points]
                      else
                        measurements[:thickness_in_points]*2 + measurements[:flap_height]*2 + measurements[:height_in_points]
                      end


reference_starting_x = 0
reference_starting_y = if data['box']['bottom_style'] == 'glued'
                         measurements[:thickness_in_points]
                       else
                         measurements[:thickness_in_points] + measurements[:flap_height]
                       end

measurements[:widths][:left_edge] = 0
measurements[:widths][:left_edge_tuck_flap_indent] = EIGHTH_INCH
measurements[:widths][:left_edge_tuck_flap_indent_2] = QUARTER_INCH
measurements[:widths][:back_face_left_side] = measurements[:thickness_in_points]
measurements[:widths][:left_side_flap_cut] = measurements[:thickness_in_points] + QUARTER_INCH
measurements[:widths][:right_side_flap_cut] = measurements[:thickness_in_points] + measurements[:width_in_points] - QUARTER_INCH
measurements[:widths][:left_side_flap_corner] = measurements[:thickness_in_points] + EIGHTH_INCH
measurements[:widths][:right_side_flap_corner] = measurements[:thickness_in_points] + measurements[:width_in_points] - EIGHTH_INCH
measurements[:widths][:back_face_right_side] = measurements[:thickness_in_points] + measurements[:width_in_points]
measurements[:widths][:right_side_tuck_flap_indent] = 2*measurements[:thickness_in_points] + measurements[:width_in_points] - QUARTER_INCH
measurements[:widths][:right_side_tuck_flap_indent_2] = 2*measurements[:thickness_in_points] + measurements[:width_in_points] - EIGHTH_INCH
measurements[:widths][:front_face_left_edge] = 2*measurements[:thickness_in_points] + measurements[:width_in_points]
measurements[:widths][:front_face_right_edge] = 2*measurements[:thickness_in_points] + 2*measurements[:width_in_points]
measurements[:widths][:notch_center] = 2*measurements[:thickness_in_points] + 1.5*measurements[:width_in_points]
measurements[:widths][:side_glue_flap_right_edge] = 3*measurements[:thickness_in_points] + 2*measurements[:width_in_points]
measurements[:widths][:back_left_side_bottom_flap_glue_point] = EIGHTH_INCH
measurements[:widths][:back_right_side_bottom_flap_glue_point] = EIGHTH_INCH + measurements[:thickness_in_points] + measurements[:width_in_points]
measurements[:widths][:bottom_glue_flap_glue_point] = EIGHTH_INCH + 2*measurements[:thickness_in_points] + measurements[:width_in_points]
measurements[:widths][:side_glue_flap_glue_point] = 2*measurements[:thickness_in_points] + 2*measurements[:width_in_points] + EIGHTH_INCH
measurements[:widths][:reverse_left_edge] = bounding_box_width
measurements[:widths][:reverse_left_edge_tuck_flap_indent] = bounding_box_width - EIGHTH_INCH
measurements[:widths][:reverse_left_edge_tuck_flap_indent_2] = bounding_box_width - QUARTER_INCH
measurements[:widths][:reverse_back_face_left_side] = bounding_box_width - measurements[:thickness_in_points]
measurements[:widths][:reverse_left_side_flap_cut] = bounding_box_width - measurements[:thickness_in_points] - QUARTER_INCH
measurements[:widths][:reverse_right_side_flap_cut] = bounding_box_width - measurements[:thickness_in_points] - measurements[:width_in_points] + QUARTER_INCH
measurements[:widths][:reverse_back_face_right_side] = bounding_box_width - measurements[:thickness_in_points] - measurements[:width_in_points]
measurements[:widths][:reverse_right_side_tuck_flap_indent] = bounding_box_width - 2*measurements[:thickness_in_points] - measurements[:width_in_points] + QUARTER_INCH
measurements[:widths][:reverse_right_side_tuck_flap_indent_2] = bounding_box_width - 2*measurements[:thickness_in_points] - measurements[:width_in_points] + EIGHTH_INCH
measurements[:widths][:reverse_front_face_left_edge] = bounding_box_width - 2*measurements[:thickness_in_points] - measurements[:width_in_points]
measurements[:widths][:reverse_front_face_right_edge] = bounding_box_width - 2*measurements[:thickness_in_points] - 2*measurements[:width_in_points]
measurements[:widths][:reverse_notch_center] = bounding_box_width - 2*measurements[:thickness_in_points] - 1.5*measurements[:width_in_points]
measurements[:widths][:reverse_side_glue_flap_right_edge] = bounding_box_width - 3*measurements[:thickness_in_points] - 2*measurements[:width_in_points]
measurements[:widths][:reverse_back_left_side_bottom_flap_glue_point] = bounding_box_width - EIGHTH_INCH
measurements[:widths][:reverse_back_right_side_bottom_flap_glue_point] = bounding_box_width - EIGHTH_INCH - measurements[:thickness_in_points] - measurements[:width_in_points]
measurements[:widths][:reverse_bottom_glue_flap_glue_point] = bounding_box_width - EIGHTH_INCH - 2*measurements[:thickness_in_points] - measurements[:width_in_points]
measurements[:widths][:reverse_side_glue_flap_glue_point] = bounding_box_width - 2*measurements[:thickness_in_points] - 2*measurements[:width_in_points] - EIGHTH_INCH

measurements[:heights][:glue_patch_on_thickness_sides] = measurements[:thickness_in_points] - QUARTER_INCH
measurements[:heights][:glue_patch_on_width_sides] = measurements[:width_in_points] - QUARTER_INCH
measurements[:heights][:glue_patch_on_height_sides] = measurements[:height_in_points] - QUARTER_INCH
measurements[:heights][:bottom_edge] = reference_starting_y - measurements[:thickness_in_points]
measurements[:heights][:faces_bottom_edge] = reference_starting_y
measurements[:heights][:faces_lower_tuck_flap_fold] = reference_starting_y + measurements[:height_in_points] - QUARTER_INCH
measurements[:heights][:faces_top_edge] = reference_starting_y + measurements[:height_in_points]
measurements[:heights][:side_tuck_flap_before_indent_1] = reference_starting_y + measurements[:height_in_points] + EIGHTH_INCH
measurements[:heights][:side_tuck_flap_at_indent_1] = reference_starting_y + measurements[:height_in_points] + QUARTER_INCH
measurements[:heights][:side_tuck_flap_at_indent_2] = reference_starting_y + measurements[:height_in_points] + measurements[:tuck_flap_height]
measurements[:heights][:top_of_top_face] = reference_starting_y + measurements[:thickness_in_points] + measurements[:height_in_points]
measurements[:heights][:start_tuck_flap_corner_rounding] = reference_starting_y + measurements[:thickness_in_points] + measurements[:height_in_points] + measurements[:flap_height] - QUARTER_INCH
measurements[:heights][:top_of_tuck_flap] = reference_starting_y + measurements[:thickness_in_points] + measurements[:height_in_points] + measurements[:flap_height]
measurements[:heights][:top_of_tuck_flap_face] = reference_starting_y + measurements[:thickness_in_points] + 2*measurements[:height_in_points]
measurements[:heights][:bottom_glue_flap_glue_point] = reference_starting_y - EIGHTH_INCH
measurements[:heights][:side_glue_flap_glue_point] = reference_starting_y - EIGHTH_INCH + measurements[:height_in_points]
measurements[:heights][:bottom_of_bottom_tuck_flap] = reference_starting_y -measurements[:thickness_in_points] - measurements[:flap_height]
measurements[:heights][:start_bottom_tuck_flap_corner_rounding] = reference_starting_y - measurements[:thickness_in_points] - measurements[:flap_height] + QUARTER_INCH
measurements[:heights][:bottom_side_tuck_flap_before_indent_1] = reference_starting_y - EIGHTH_INCH
measurements[:heights][:bottom_side_tuck_flap_at_indent_1] = reference_starting_y - QUARTER_INCH
measurements[:heights][:bottom_side_tuck_flap_at_indent_2] = reference_starting_y - measurements[:tuck_flap_height]

#points[ 0] = widths[:left_edge], heights[:faces_bottom_edge]
measurements[:points][ 0] = 0, 0
measurements[:points][ 1] = measurements[:widths][:left_edge], measurements[:heights][:bottom_edge]
measurements[:points][ 2] = measurements[:widths][:left_edge], measurements[:heights][:faces_bottom_edge]
measurements[:points][ 3] = measurements[:widths][:left_edge], measurements[:heights][:faces_top_edge]
measurements[:points][ 4] = measurements[:widths][:left_edge], measurements[:heights][:side_tuck_flap_before_indent_1]
measurements[:points][ 5] = measurements[:widths][:left_edge_tuck_flap_indent],   measurements[:heights][:side_tuck_flap_at_indent_1]
measurements[:points][ 6] = measurements[:widths][:left_edge_tuck_flap_indent_2], measurements[:heights][:side_tuck_flap_at_indent_2]
measurements[:points][ 7] = measurements[:widths][:back_face_left_side], measurements[:heights][:start_tuck_flap_corner_rounding]
measurements[:points][ 8] = measurements[:widths][:back_face_left_side], measurements[:heights][:top_of_top_face]
measurements[:points][ 9] = measurements[:widths][:back_face_left_side], measurements[:heights][:side_tuck_flap_at_indent_2]
measurements[:points][10] = measurements[:widths][:back_face_left_side], measurements[:heights][:faces_top_edge]
measurements[:points][11] = measurements[:widths][:left_side_flap_cut], measurements[:heights][:bottom_edge]
measurements[:points][12] = measurements[:widths][:back_face_left_side], measurements[:heights][:bottom_edge]
measurements[:points][13] = measurements[:widths][:back_face_left_side], measurements[:heights][:faces_bottom_edge]
measurements[:points][14] = measurements[:widths][:left_side_flap_cut], measurements[:heights][:top_of_tuck_flap]
measurements[:points][15] = measurements[:widths][:left_side_flap_cut], measurements[:heights][:top_of_top_face]
measurements[:points][16] = measurements[:widths][:right_side_flap_cut], measurements[:heights][:top_of_tuck_flap]
measurements[:points][17] = measurements[:widths][:right_side_flap_cut], measurements[:heights][:top_of_top_face]
measurements[:points][18] = measurements[:widths][:back_face_right_side], measurements[:heights][:start_tuck_flap_corner_rounding]
measurements[:points][19] = measurements[:widths][:back_face_right_side], measurements[:heights][:top_of_top_face]
measurements[:points][20] = measurements[:widths][:back_face_right_side], measurements[:heights][:side_tuck_flap_at_indent_2]
measurements[:points][21] = measurements[:widths][:back_face_right_side], measurements[:heights][:faces_top_edge]
measurements[:points][22] = measurements[:widths][:right_side_flap_cut], measurements[:heights][:bottom_edge]
measurements[:points][23] = measurements[:widths][:back_face_right_side], measurements[:heights][:bottom_edge]
measurements[:points][24] = measurements[:widths][:back_face_right_side], measurements[:heights][:faces_bottom_edge]
measurements[:points][25] = measurements[:widths][:right_side_tuck_flap_indent], measurements[:heights][:side_tuck_flap_at_indent_2]
measurements[:points][26] = measurements[:widths][:right_side_tuck_flap_indent_2], measurements[:heights][:side_tuck_flap_at_indent_1]
measurements[:points][27] = measurements[:widths][:front_face_left_edge], measurements[:heights][:side_tuck_flap_before_indent_1]
measurements[:points][28] = measurements[:widths][:front_face_left_edge], measurements[:heights][:faces_top_edge]
measurements[:points][29] = measurements[:widths][:front_face_left_edge], measurements[:heights][:faces_bottom_edge]
measurements[:points][30] = measurements[:widths][:front_face_left_edge], measurements[:heights][:bottom_edge]
measurements[:points][31] = measurements[:widths][:front_face_left_edge], 0
measurements[:points][32] = measurements[:widths][:front_face_right_edge], measurements[:heights][:faces_top_edge]
measurements[:points][33] = measurements[:widths][:front_face_right_edge], measurements[:heights][:faces_bottom_edge]
measurements[:points][34] = measurements[:widths][:front_face_right_edge], measurements[:heights][:bottom_edge]
measurements[:points][35] = measurements[:widths][:side_glue_flap_right_edge], measurements[:heights][:faces_top_edge]
measurements[:points][36] = measurements[:widths][:side_glue_flap_right_edge], measurements[:heights][:faces_bottom_edge]
measurements[:points][37] = measurements[:widths][:notch_center], measurements[:heights][:faces_top_edge]
measurements[:points][38] = measurements[:widths][:back_left_side_bottom_flap_glue_point] , measurements[:heights][:bottom_glue_flap_glue_point]
measurements[:points][39] = measurements[:widths][:back_right_side_bottom_flap_glue_point], measurements[:heights][:bottom_glue_flap_glue_point]
measurements[:points][40] = measurements[:widths][:bottom_glue_flap_glue_point]           , measurements[:heights][:bottom_glue_flap_glue_point]
measurements[:points][41] = measurements[:widths][:side_glue_flap_glue_point]             , measurements[:heights][:side_glue_flap_glue_point]
measurements[:points][42] = measurements[:widths][:back_face_right_side], measurements[:heights][:faces_lower_tuck_flap_fold]
measurements[:points][43] = measurements[:widths][:back_face_left_side],  measurements[:heights][:faces_lower_tuck_flap_fold]
measurements[:points][44] = 0,0
measurements[:points][45] = 0,0
measurements[:points][46] = measurements[:widths][:front_face_left_edge]+3,  measurements[:heights][:faces_lower_tuck_flap_fold]-EIGHTH_INCH
measurements[:points][47] = measurements[:widths][:back_face_right_side]+3,  measurements[:heights][:faces_lower_tuck_flap_fold]-EIGHTH_INCH
measurements[:points][48] = measurements[:widths][:right_side_flap_cut],  measurements[:heights][:start_bottom_tuck_flap_corner_rounding]
measurements[:points][49] = measurements[:widths][:left_side_flap_cut],   measurements[:heights][:start_bottom_tuck_flap_corner_rounding]
measurements[:points][50] = measurements[:widths][:left_side_flap_cut],   measurements[:heights][:bottom_of_bottom_tuck_flap]
measurements[:points][51] = measurements[:widths][:right_side_flap_cut],  measurements[:heights][:bottom_of_bottom_tuck_flap]
measurements[:points][52] = measurements[:widths][:back_face_right_side], measurements[:heights][:start_bottom_tuck_flap_corner_rounding]
measurements[:points][53] = measurements[:widths][:back_face_left_side],  measurements[:heights][:start_bottom_tuck_flap_corner_rounding]
measurements[:points][54] = measurements[:widths][:left_edge],                     measurements[:heights][:bottom_side_tuck_flap_before_indent_1]
measurements[:points][55] = measurements[:widths][:left_edge_tuck_flap_indent],    measurements[:heights][:bottom_side_tuck_flap_at_indent_1]
measurements[:points][56] = measurements[:widths][:left_edge_tuck_flap_indent_2],  measurements[:heights][:bottom_side_tuck_flap_at_indent_2]
measurements[:points][57] = measurements[:widths][:back_face_left_side],           measurements[:heights][:bottom_side_tuck_flap_at_indent_2]
measurements[:points][58] = measurements[:widths][:back_face_right_side],          measurements[:heights][:bottom_side_tuck_flap_at_indent_2]
measurements[:points][59] = measurements[:widths][:right_side_tuck_flap_indent],   measurements[:heights][:bottom_side_tuck_flap_at_indent_2]
measurements[:points][60] = measurements[:widths][:right_side_tuck_flap_indent_2], measurements[:heights][:bottom_side_tuck_flap_at_indent_1]
measurements[:points][61] = measurements[:widths][:front_face_left_edge],          measurements[:heights][:bottom_side_tuck_flap_before_indent_1]

measurements[:reverse_points][ 0] = measurements[:widths][:reverse_left_edge], measurements[:heights][:bottom_edge]
measurements[:reverse_points][ 1] = measurements[:widths][:reverse_left_edge], measurements[:heights][:bottom_edge]
measurements[:reverse_points][ 2] = measurements[:widths][:reverse_left_edge], measurements[:heights][:faces_bottom_edge]
measurements[:reverse_points][ 3] = measurements[:widths][:reverse_left_edge], measurements[:heights][:faces_top_edge]
measurements[:reverse_points][ 4] = measurements[:widths][:reverse_left_edge], measurements[:heights][:side_tuck_flap_before_indent_1]
measurements[:reverse_points][ 5] = measurements[:widths][:reverse_left_edge_tuck_flap_indent],   measurements[:heights][:side_tuck_flap_at_indent_1]
measurements[:reverse_points][ 6] = measurements[:widths][:reverse_left_edge_tuck_flap_indent_2], measurements[:heights][:side_tuck_flap_at_indent_2]
measurements[:reverse_points][ 7] = measurements[:widths][:reverse_back_face_left_side], measurements[:heights][:start_tuck_flap_corner_rounding]
measurements[:reverse_points][ 8] = measurements[:widths][:reverse_back_face_left_side], measurements[:heights][:top_of_top_face]
measurements[:reverse_points][ 9] = measurements[:widths][:reverse_back_face_left_side], measurements[:heights][:side_tuck_flap_at_indent_2]
measurements[:reverse_points][10] = measurements[:widths][:reverse_back_face_left_side], measurements[:heights][:faces_top_edge]
measurements[:reverse_points][11] = measurements[:widths][:reverse_back_face_left_side], measurements[:heights][:bottom_edge]
measurements[:reverse_points][12] = measurements[:widths][:reverse_back_face_left_side], measurements[:heights][:bottom_edge]
measurements[:reverse_points][13] = measurements[:widths][:reverse_back_face_left_side], measurements[:heights][:faces_bottom_edge]
measurements[:reverse_points][14] = measurements[:widths][:reverse_left_side_flap_cut], measurements[:heights][:top_of_tuck_flap]
measurements[:reverse_points][15] = measurements[:widths][:reverse_left_side_flap_cut], measurements[:heights][:top_of_top_face]
measurements[:reverse_points][16] = measurements[:widths][:reverse_right_side_flap_cut], measurements[:heights][:top_of_tuck_flap]
measurements[:reverse_points][17] = measurements[:widths][:reverse_right_side_flap_cut], measurements[:heights][:top_of_top_face]
measurements[:reverse_points][18] = measurements[:widths][:reverse_back_face_right_side], measurements[:heights][:start_tuck_flap_corner_rounding]
measurements[:reverse_points][19] = measurements[:widths][:reverse_back_face_right_side], measurements[:heights][:top_of_top_face]
measurements[:reverse_points][20] = measurements[:widths][:reverse_back_face_right_side], measurements[:heights][:side_tuck_flap_at_indent_2]
measurements[:reverse_points][21] = measurements[:widths][:reverse_back_face_right_side], measurements[:heights][:faces_top_edge]
measurements[:reverse_points][22] = measurements[:widths][:reverse_back_face_right_side], measurements[:heights][:bottom_edge]
measurements[:reverse_points][23] = measurements[:widths][:reverse_back_face_right_side], measurements[:heights][:bottom_edge]
measurements[:reverse_points][24] = measurements[:widths][:reverse_back_face_right_side], measurements[:heights][:faces_bottom_edge]
measurements[:reverse_points][25] = measurements[:widths][:reverse_right_side_tuck_flap_indent], measurements[:heights][:side_tuck_flap_at_indent_2]
measurements[:reverse_points][26] = measurements[:widths][:reverse_right_side_tuck_flap_indent_2], measurements[:heights][:side_tuck_flap_at_indent_1]
measurements[:reverse_points][27] = measurements[:widths][:reverse_front_face_left_edge], measurements[:heights][:side_tuck_flap_before_indent_1]
measurements[:reverse_points][28] = measurements[:widths][:reverse_front_face_left_edge], measurements[:heights][:faces_top_edge]
measurements[:reverse_points][29] = measurements[:widths][:reverse_front_face_left_edge], measurements[:heights][:faces_bottom_edge]
measurements[:reverse_points][30] = measurements[:widths][:reverse_front_face_left_edge], measurements[:heights][:bottom_edge]
measurements[:reverse_points][31] = measurements[:widths][:reverse_front_face_left_edge], measurements[:heights][:bottom_edge]
measurements[:reverse_points][32] = measurements[:widths][:reverse_front_face_right_edge], measurements[:heights][:faces_top_edge]
measurements[:reverse_points][33] = measurements[:widths][:reverse_front_face_right_edge], measurements[:heights][:faces_bottom_edge]
measurements[:reverse_points][34] = measurements[:widths][:reverse_front_face_right_edge], measurements[:heights][:bottom_edge]
measurements[:reverse_points][35] = measurements[:widths][:reverse_side_glue_flap_right_edge], measurements[:heights][:faces_top_edge]
measurements[:reverse_points][36] = measurements[:widths][:reverse_side_glue_flap_right_edge], measurements[:heights][:faces_bottom_edge]
measurements[:reverse_points][37] = measurements[:widths][:reverse_notch_center], measurements[:heights][:faces_top_edge]
measurements[:reverse_points][38] = measurements[:widths][:reverse_back_left_side_bottom_flap_glue_point] , measurements[:heights][:bottom_glue_flap_glue_point]
measurements[:reverse_points][39] = measurements[:widths][:reverse_back_right_side_bottom_flap_glue_point], measurements[:heights][:bottom_glue_flap_glue_point]
measurements[:reverse_points][40] = measurements[:widths][:reverse_bottom_glue_flap_glue_point]           , measurements[:heights][:bottom_glue_flap_glue_point]
measurements[:reverse_points][41] = measurements[:widths][:reverse_side_glue_flap_glue_point]             , measurements[:heights][:side_glue_flap_glue_point]
measurements[:reverse_points][42] = measurements[:widths][:reverse_back_face_right_side], measurements[:heights][:faces_lower_tuck_flap_fold]
measurements[:reverse_points][43] = measurements[:widths][:reverse_back_face_left_side],  measurements[:heights][:faces_lower_tuck_flap_fold]
measurements[:reverse_points][44] = measurements[:widths][:reverse_right_side_flap_cut], measurements[:heights][:start_tuck_flap_corner_rounding]
measurements[:reverse_points][45] = measurements[:widths][:reverse_left_side_flap_cut],  measurements[:heights][:start_tuck_flap_corner_rounding]
measurements[:reverse_points][46] = measurements[:widths][:reverse_back_face_left_side],  measurements[:heights][:top_of_tuck_flap]
measurements[:reverse_points][47] = measurements[:widths][:reverse_back_face_right_side],  measurements[:heights][:top_of_tuck_flap_face]
measurements[:reverse_points][48] = measurements[:widths][:reverse_right_side_flap_cut],  measurements[:heights][:start_bottom_tuck_flap_corner_rounding]
measurements[:reverse_points][49] = measurements[:widths][:reverse_left_side_flap_cut],   measurements[:heights][:start_bottom_tuck_flap_corner_rounding]
measurements[:reverse_points][50] = measurements[:widths][:reverse_left_side_flap_cut],   measurements[:heights][:bottom_of_bottom_tuck_flap]
measurements[:reverse_points][51] = measurements[:widths][:reverse_right_side_flap_cut],  measurements[:heights][:bottom_of_bottom_tuck_flap]
measurements[:reverse_points][52] = measurements[:widths][:reverse_back_face_right_side], measurements[:heights][:start_bottom_tuck_flap_corner_rounding]
measurements[:reverse_points][53] = measurements[:widths][:reverse_back_face_left_side],  measurements[:heights][:start_bottom_tuck_flap_corner_rounding]
measurements[:reverse_points][54] = measurements[:widths][:reverse_left_edge],                     measurements[:heights][:bottom_side_tuck_flap_before_indent_1]
measurements[:reverse_points][55] = measurements[:widths][:reverse_left_edge_tuck_flap_indent],    measurements[:heights][:bottom_side_tuck_flap_at_indent_1]
measurements[:reverse_points][56] = measurements[:widths][:reverse_left_edge_tuck_flap_indent_2],  measurements[:heights][:bottom_side_tuck_flap_at_indent_2]
measurements[:reverse_points][57] = measurements[:widths][:reverse_back_face_left_side],           measurements[:heights][:bottom_side_tuck_flap_at_indent_2]
measurements[:reverse_points][58] = measurements[:widths][:reverse_back_face_right_side],          measurements[:heights][:bottom_side_tuck_flap_at_indent_2]
measurements[:reverse_points][59] = measurements[:widths][:reverse_right_side_tuck_flap_indent],   measurements[:heights][:bottom_side_tuck_flap_at_indent_2]
measurements[:reverse_points][60] = measurements[:widths][:reverse_right_side_tuck_flap_indent_2], measurements[:heights][:bottom_side_tuck_flap_at_indent_1]
measurements[:reverse_points][61] = measurements[:widths][:reverse_front_face_left_edge],          measurements[:heights][:bottom_side_tuck_flap_before_indent_1]
measurements[:reverse_points][62] = measurements[:widths][:reverse_back_face_right_side] - measurements[:width_in_points], measurements[:heights][:bottom_edge] + measurements[:height_in_points]
measurements[:reverse_points][63] = measurements[:widths][:reverse_back_face_left_side] + measurements[:width_in_points], measurements[:heights][:top_of_top_face] - measurements[:height_in_points]


measurements[:face_points][:front_upper_left]  = measurements[:reverse_points][32]
measurements[:face_points][:front_lower_right] = measurements[:reverse_points][29]
measurements[:face_points][:back_upper_left]  = measurements[:reverse_points][21]
measurements[:face_points][:back_lower_right] = measurements[:reverse_points][13]
measurements[:face_points][:left_side_upper_left]  = measurements[:reverse_points][10]
measurements[:face_points][:left_side_lower_right] = measurements[:reverse_points][2]
measurements[:face_points][:glue_flap_upper_left]  = measurements[:reverse_points][35]
measurements[:face_points][:glue_flap_lower_right] = measurements[:reverse_points][33]
measurements[:face_points][:right_side_upper_left]  = measurements[:reverse_points][28]
measurements[:face_points][:right_side_lower_right] = measurements[:reverse_points][24]
measurements[:face_points][:bottom_upper_left]  = measurements[:reverse_points][24]
measurements[:face_points][:bottom_lower_right] = measurements[:reverse_points][12]
measurements[:face_points][:top_upper_left]  = measurements[:reverse_points][19]
measurements[:face_points][:top_lower_right] = measurements[:reverse_points][10]
measurements[:face_points][:tuck_flap_upper_left] = measurements[:reverse_points][47]
measurements[:face_points][:tuck_flap_lower_right] = measurements[:reverse_points][8]
measurements[:face_points][:hidden_tuck_flap_upper_left] = measurements[:reverse_points][47]
measurements[:face_points][:hidden_tuck_flap_lower_right] = measurements[:reverse_points][46]
measurements[:face_points][:credits_upper_left] = measurements[:points][46]
measurements[:face_points][:credits_lower_right] = [measurements[:points][33].first-6 , measurements[:points][33].last  ]
measurements[:face_points][:dimensions_upper_left] = measurements[:points][43]
measurements[:face_points][:dimensions_lower_right] = measurements[:points][24]
measurements[:face_points][:url_upper_left] = measurements[:points][47]
measurements[:face_points][:url_lower_right] = [measurements[:points][29].first - 3, measurements[:points][29].last]

if data['box']['bottom_style'] == 'glued'
  measurements[:cut_lines] << measurements[:points][1] + measurements[:points][11]
  measurements[:cut_lines] << measurements[:points][1] + measurements[:points][2]
  measurements[:cut_lines] << measurements[:points][33] + measurements[:points][34]
  measurements[:cut_lines] << measurements[:points][30] + measurements[:points][34]
  measurements[:cut_lines] << measurements[:points][29] + measurements[:points][30]
  measurements[:cut_lines] << measurements[:points][22] + measurements[:points][30]
  measurements[:cut_lines] << measurements[:points][12] + measurements[:points][23]
else
  measurements[:cut_lines] << measurements[:points][12] + measurements[:points][53]
  measurements[:cut_lines] << measurements[:points][23] + measurements[:points][52]
  measurements[:cut_lines] << measurements[:points][50] + measurements[:points][51]
  measurements[:cut_lines] << measurements[:points][ 2] + measurements[:points][54]
  measurements[:cut_lines] << measurements[:points][54] + measurements[:points][55]
  measurements[:cut_lines] << measurements[:points][55] + measurements[:points][56]
  measurements[:cut_lines] << measurements[:points][56] + measurements[:points][57]
  measurements[:cut_lines] << measurements[:points][58] + measurements[:points][59]
  measurements[:cut_lines] << measurements[:points][59] + measurements[:points][60]
  measurements[:cut_lines] << measurements[:points][60] + measurements[:points][61]
  measurements[:cut_lines] << measurements[:points][61] + measurements[:points][29]
  measurements[:cut_lines] << measurements[:points][53] + measurements[:points][50]
  measurements[:cut_lines] << measurements[:points][51] + measurements[:points][52]
end

measurements[:cut_lines] << measurements[:points][7] + measurements[:points][14]
measurements[:cut_lines] << measurements[:points][16] + measurements[:points][18]
measurements[:cut_lines] << measurements[:points][2] + measurements[:points][4]
measurements[:cut_lines] << measurements[:points][4] + measurements[:points][5]
measurements[:cut_lines] << measurements[:points][5] + measurements[:points][6]
measurements[:cut_lines] << measurements[:points][6] + measurements[:points][9]
measurements[:cut_lines] << measurements[:points][8] + measurements[:points][15]
measurements[:cut_lines] << measurements[:points][12] + measurements[:points][13]
measurements[:cut_lines] << measurements[:points][7] + measurements[:points][43]
measurements[:cut_lines] << measurements[:points][14] + measurements[:points][16]
measurements[:cut_lines] << measurements[:points][18] + measurements[:points][42]
measurements[:cut_lines] << measurements[:points][20] + measurements[:points][25]
measurements[:cut_lines] << measurements[:points][25] + measurements[:points][26]
measurements[:cut_lines] << measurements[:points][26] + measurements[:points][27]
measurements[:cut_lines] << measurements[:points][27] + measurements[:points][28]
measurements[:cut_lines] << measurements[:points][28] + measurements[:points][35]
measurements[:cut_lines] << measurements[:points][35] + measurements[:points][36]
measurements[:cut_lines] << measurements[:points][33] + measurements[:points][36]
measurements[:cut_lines] << measurements[:points][24] + measurements[:points][23]
measurements[:cut_lines] << measurements[:points][17] + measurements[:points][19]
measurements[:cut_lines] << measurements[:points][11] + measurements[:points][12]
measurements[:cut_lines] << measurements[:points][22] + measurements[:points][23]

measurements[:reverse_cut_lines] << measurements[:reverse_points][1]  + measurements[:reverse_points][4]
measurements[:reverse_cut_lines] << measurements[:reverse_points][4]  + measurements[:reverse_points][5]
measurements[:reverse_cut_lines] << measurements[:reverse_points][5]  + measurements[:reverse_points][6]
measurements[:reverse_cut_lines] << measurements[:reverse_points][6]  + measurements[:reverse_points][9]
measurements[:reverse_cut_lines] << measurements[:reverse_points][8]  + measurements[:reverse_points][15]
measurements[:reverse_cut_lines] << measurements[:reverse_points][1]  + measurements[:reverse_points][11]
measurements[:reverse_cut_lines] << measurements[:reverse_points][12] + measurements[:reverse_points][13]
measurements[:reverse_cut_lines] << measurements[:reverse_points][7]  + measurements[:reverse_points][43]
measurements[:reverse_cut_lines] << measurements[:reverse_points][14] + measurements[:reverse_points][16]
measurements[:reverse_cut_lines] << measurements[:reverse_points][18] + measurements[:reverse_points][42]
measurements[:reverse_cut_lines] << measurements[:reverse_points][20] + measurements[:reverse_points][25]
measurements[:reverse_cut_lines] << measurements[:reverse_points][25] + measurements[:reverse_points][26]
measurements[:reverse_cut_lines] << measurements[:reverse_points][26] + measurements[:reverse_points][27]
measurements[:reverse_cut_lines] << measurements[:reverse_points][27] + measurements[:reverse_points][28]
measurements[:reverse_cut_lines] << measurements[:reverse_points][28] + measurements[:reverse_points][35]
measurements[:reverse_cut_lines] << measurements[:reverse_points][35] + measurements[:reverse_points][36]
measurements[:reverse_cut_lines] << measurements[:reverse_points][33] + measurements[:reverse_points][36]
measurements[:reverse_cut_lines] << measurements[:reverse_points][33] + measurements[:reverse_points][34]
measurements[:reverse_cut_lines] << measurements[:reverse_points][31] + measurements[:reverse_points][34]
measurements[:reverse_cut_lines] << measurements[:reverse_points][29] + measurements[:reverse_points][31]
measurements[:reverse_cut_lines] << measurements[:reverse_points][24] + measurements[:reverse_points][23]
measurements[:reverse_cut_lines] << measurements[:reverse_points][22] + measurements[:reverse_points][30]
measurements[:reverse_cut_lines] << measurements[:reverse_points][12] + measurements[:reverse_points][23]
measurements[:reverse_cut_lines] << measurements[:reverse_points][17] + measurements[:reverse_points][19]

if data['box']['bottom_style'] == 'glued'
else
  measurements[:fold_lines] << measurements[:points][11] + measurements[:points][22]
end
measurements[:fold_lines] << measurements[:points][2] + measurements[:points][33]
measurements[:fold_lines] << measurements[:points][3] + measurements[:points][28]
measurements[:fold_lines] << measurements[:points][15] + measurements[:points][17]
measurements[:fold_lines] << measurements[:points][10] + measurements[:points][13]
measurements[:fold_lines] << measurements[:points][21] + measurements[:points][24]
measurements[:fold_lines] << measurements[:points][28] + measurements[:points][29]
measurements[:fold_lines] << measurements[:points][32] + measurements[:points][33]
measurements[:fold_lines] << measurements[:points][42] + measurements[:points][43]
measurements[:glue_boxes] << measurements[:points][41] + [measurements[:widths][:glue_thick], measurements[:heights][:glue_side] ]
measurements[:glue_boxes] << measurements[:points][40] + [measurements[:widths][:glue_width], measurements[:heights][:glue_thick] ]
measurements[:glue_boxes] << measurements[:points][38] + [measurements[:widths][:glue_thick], measurements[:heights][:glue_flap_thick] ]
measurements[:glue_boxes] << measurements[:points][39] + [measurements[:widths][:glue_thick], measurements[:heights][:glue_flap_thick] ]

measurements[:tuck_flap_masks][:top] = [measurements[:reverse_points][8],measurements[:reverse_points][7],measurements[:reverse_points][14],measurements[:reverse_points][16],measurements[:reverse_points][18],measurements[:reverse_points][19]]
measurements[:tuck_flap_masks][:bottom] = [measurements[:reverse_points][12],measurements[:reverse_points][53],measurements[:reverse_points][50],measurements[:reverse_points][51],measurements[:reverse_points][52],measurements[:reverse_points][23]]

# box_orientation valid values are:
#     vertical = point is upper left, no rotation
#     upside_down = point is lower left, needs 180 rotation
#     sideways_right = point is upper left, needs 90 rotation ccw
#     sideways_left = point is upper right, needs 90 rotation cw
# text_orientation
#     vertical = point is upper left, from page view text flows from upper right to lower left
#     upside_down = point is lower left, needs 180 rotation, from page view text flows from bottom to top
#     sideways_right = point is upper left, needs 90 rotation ccw, top of text is left, bottom of text is right
#     sideways_left = point is upper right, needs 90 rotation cw, top of text is right, bottom of test is left
# background_color
#     can be nil, otherwise expected to be 6 hex char
# image
#     can be nil
# image_orientation - only valid if image is present
#     vertical = point is upper left, text flows from upper right to lower left
#     upside_down = point is lower left, needs 180 rotation
#     sideways_right = point is upper left, needs 90 rotation ccw
#     sideways_left = point is upper right, needs 90 rotation cw
# image can be fit to size or forced height or forced width
# z indexing is background color is on the bottom, image is in the middle, text is on top
#
def render_box_face point_upper_left, point_lower_right, args
  box_orientation = args['box_orientation'] || 'vertical'
  font_face = args['font'] || "Helvetica"
  font_size = args['font_size'] || 150
  width  = point_lower_right.first - point_upper_left.first
  height = point_upper_left.last - point_lower_right.last
  text_align = args['text_align'] && args['text_align'].to_sym || :center
  text_valign = args['text_valign'] && args['text_valign'].to_sym || :center
  point_upper_right = point_lower_right.first, point_upper_left.last
  point_lower_left = point_upper_left.first, point_lower_right.last
  if args['background_color']
    save_graphics_state do
      fill_color args['background_color']
      stroke_color args['background_color']
      fill_and_stroke_rectangle point_upper_left, width, height
    end
  end

  if args['image']
    case args['image_orientation']
    when 'sideways_right'
      angle = 90
      point = point_lower_left
      w = height
      h = width
    when 'sideways_left'
      point = point_upper_right
      angle = 270
      w = height
      h = width
    when 'upside_down'
      point = point_lower_right
      angle = 180
      w = width
      h = height
    else
      angle = 0
      point = point_upper_left
      w = width
      h = height
    end
    rotate angle, origin: point do
      bounding_box point, width: w, height: h do
        if args['image_fit_or_native'] == 'stretch'
          image args['image'], at: point, width: w, height: h
        else
          # 'fit'
          image args['image'], position: :center, vposition: :center, fit: [w, h]
        end
      end
    end
  end

  if args['text']
    save_graphics_state do
      text_mode = :fill
      if args['text_fill_color'] && args['text_stroke_color']
        fill_color args['text_fill_color']
        stroke_color args['text_stroke_color']
        text_mode = :fill_stroke
      elsif args['text_stroke_color']
        stroke_color args['text_stroke_color']
        text_mode = :stroke
      elsif args['text_fill_color']
        fill_color args['text_fill_color']
      end

      case args['text_orientation']
      when 'sideways_right'
        angle = 90
        point = point_lower_left
        w = height
        h = width
      when 'sideways_left'
        point = point_upper_right
        angle = 270
        w = height
        h = width
      when 'upside_down'
        point = point_lower_right
        angle = 180
        w = width
        h = height
      else
        angle = 0
        point = point_upper_left
        w = width
        h = height
      end
      rotate angle, origin: point do
        font font_face, size: font_size do
          text_box args['text'], at: point, width: w, height: h, mode: text_mode,
                   align: text_align, valign: text_valign, overflow: :shrink_to_fit,
                   min_font_size: 1, disable_wrap_by_char: true, kerning: true
        end
      end
    end
  end
end

def opposite_direction direction
  case direction
  when 'vertical'
    'upside_down'
  when 'upside_down'
    'vertical'
  when 'sideways_left'
    'sideways_right'
  when 'sideways_right'
    'sideways_left'
  end
end

# draw a ruler so the person looking at the prints can see if shrink to fit was enabled
# also allows person looking at the prints to make sure the cut lines line up with the images
def draw_master_edge_ruler
  rotate 270, origin: [0.25.in, 1.25.in] do
    text_box 'Master', at: [0.25.in, 1.25.in],
                     width: 1.in,
                     height: 0.25.in,
                     align: :right,
                     valign: :center,
                     overflow: :shrink_to_fit
  end
  text_box 'Corner', at: [0.25.in,0.25.in],
                     width: 1.in,
                     height: 0.25.in,
                     valign: :center,
                     overflow: :shrink_to_fit

  vertical_line 0.25.in, 5.in, at: 0.25.in
    [2,3,4,5].each do |x|
      horizontal_line 0.125.in, 0.25.in, at: ONE_INCH * x - 0.5.in
      distance = ONE_INCH * x - 0.55.in
      rotate 270, origin: [0.25.in, distance] do
        text_box "#{x} in", at: [0.25.in, distance],
                         width: 1.in,
                         height: 0.25.in,
                         valign: :center,
                         overflow: :shrink_to_fit
      end
    end
    [4,6,8,10,12].each do |x|
      horizontal_line 0.25.in, 0.375.in, at: ONE_CENTIMETER * x - 0.5.in
      distance = ONE_CENTIMETER*x - 0.55.in
      rotate 270, origin: [0.5.in, distance] do
        text_box "#{x} cm", at: [0.5.in, distance],
                         width: 1.in,
                         height: 0.25.in,
                         valign: :center,
                         overflow: :shrink_to_fit
      end
    end
  horizontal_line 0.25.in, 5.in, at: 0.25.in
    [2,3,4,5].each do |x|
      vertical_line 0.125.in, 0.25.in, at: ONE_INCH * x - 0.5.in
      text_box "#{x} in", at: [ONE_INCH * x - 0.45.in, 0.25.in],
                       width: 1.in,
                       height: 0.25.in,
                       valign: :center,
                       overflow: :shrink_to_fit
    end
    [4,6,8,10,12].each do |x|
      vertical_line 0.25.in, 0.375.in, at: ONE_CENTIMETER * x - 0.5.in
      text_box "#{x} cm", at: [( ONE_CENTIMETER*x - 0.45.in), 0.5.in],
                       width: 1.in,
                       height: 0.25.in,
                       valign: :center,
                       overflow: :shrink_to_fit
    end
end
def draw_master_edge_ruler_faces
  rotate 90, origin: [9.75.in, 0.25.in] do
    text_box 'Corner', at: [9.75.in, 0.25.in],
                     width: ONE_INCH,
                     height: 0.25.in,
                     valign: :center,
                     overflow: :shrink_to_fit
  end
  text_box 'Master', at: [8.75.in,0.25.in],
                     width: ONE_INCH,
                     height: 0.25.in,
                     align: :right,
                     valign: :center,
                     overflow: :shrink_to_fit
  vertical_line 0.25.in, 5.in, at: 9.75.in
    [2,3,4,5].each do |x|
      horizontal_line 9.75.in, 9.875.in, at: ONE_INCH * x - 0.5.in
      distance = ONE_INCH * x - 0.45.in
      rotate 90, origin: [9.75.in, distance] do
        text_box "#{x} in", at: [9.75.in, distance],
                         width: ONE_INCH,
                         height: 0.25.in,
                         valign: :center,
                         overflow: :shrink_to_fit
      end
    end
    [4,6,8,10,12].each do |x|
      horizontal_line 9.626.in, 9.75.in, at: ONE_CENTIMETER * x - 0.5.in
      distance = ONE_CENTIMETER*x - 0.45.in
      rotate 90, origin: [9.5.in, distance] do
        text_box "#{x} cm", at: [9.5.in, distance],
                         width: 1.in,
                         height: 0.25.in,
                         valign: :center,
                         overflow: :shrink_to_fit
      end
    end
  horizontal_line 5.in, 9.75.in, at: 0.25.in
    [2,3,4,5].each do |x|
      vertical_line 0.125.in, 0.25.in, at: 10.5.in - ONE_INCH * x
      text_box "#{x} in", at: [9.45.in - ONE_INCH * x, 0.25.in],
                       width: ONE_INCH,
                       height: 0.25.in,
                       align: :right,
                       valign: :center,
                       overflow: :shrink_to_fit
    end
    [4,6,8,10,12].each do |x|
      vertical_line 0.25.in, 0.375.in, at: 10.5.in - ONE_CENTIMETER * x
      text_box "#{x} cm", at: [( 9.45.in - ONE_CENTIMETER*x ), 0.5.in],
                       width: ONE_INCH,
                       height: 0.25.in,
                       align: :right,
                       valign: :center,
                       overflow: :shrink_to_fit
    end
end

def draw_box_outline_and_fold_lines info_data, measurements
    render_box_face measurements[:face_points][:credits_upper_left], measurements[:face_points][:credits_lower_right],
                    info_data['faces']['credits']
    render_box_face measurements[:face_points][:url_upper_left], measurements[:face_points][:url_lower_right],
                    info_data['faces']['url']
    render_box_face measurements[:face_points][:dimensions_upper_left], measurements[:face_points][:dimensions_lower_right],
                    info_data['faces']['dimensions']



    if info_data['debug_points']
      measurements[:points].each_with_index do |p, i|
        # puts "Point #{i} = #{p.inspect}"
        fill_circle p, 3
        draw_text i, at: p
      end
    end
    stroke do
      measurements[:cut_lines].each do |x1,y1,x2,y2|
        line [x1, y1], [x2, y2]
      end
    end

    # notch circle
    fill_color 'FFFFFF'
    stroke_color '000000'
    #bounding_box points[33], width: h, height: w do
     pie_slice measurements[:points][37], :radius => QUARTER_INCH,
               :start_angle => 180, :end_angle => 0

    #end

    save_graphics_state do
      self.line_width = 0.5
      dash 2, :space => 2, :phase => 0
      stroke do
        measurements[:fold_lines].each do |x1,y1,x2,y2|
          line [x1, y1], [x2, y2]
        end
      end
      undash
    end


    # glue boxes
    fill_color 'CCCCCC'
    fill_rectangle measurements[:points][41], measurements[:heights][:glue_patch_on_thickness_sides], measurements[:heights][:glue_patch_on_height_sides]
    if info_data['box']['bottom_style'] == 'glued'
      fill_rectangle measurements[:points][40], measurements[:heights][:glue_patch_on_width_sides], measurements[:heights][:glue_patch_on_thickness_sides]
      fill_rectangle measurements[:points][38], measurements[:heights][:glue_patch_on_thickness_sides], measurements[:heights][:glue_patch_on_thickness_sides]
      fill_rectangle measurements[:points][39], measurements[:heights][:glue_patch_on_thickness_sides], measurements[:heights][:glue_patch_on_thickness_sides]
    end
    fill_color '000000'
end

def draw_box_faces data, measurements
    font_size 150
    # FRONT
    render_box_face measurements[:face_points][:front_upper_left], measurements[:face_points][:front_lower_right],
                    data['faces']['front']
        ## reflect the front onto the tuck flap
    save_graphics_state do
      soft_mask do
        fill_color 0,0,0,0
        stroke_color 0,0,0,0
        fill_and_stroke_polygon *measurements[:tuck_flap_masks][:top]
      end
        rotate 180, origin: measurements[:reverse_points][8] do
          render_box_face measurements[:reverse_points][8], measurements[:reverse_points][63],
                          data['faces']['front']
        end
        #fill_color 'ff0000'
        #fill_rectangle [0,bounds.height],bounds.width, bounds.height
    end

    if data['box']['bottom_style'] == 'tucked'
      # reflect the bottom of the face onto the bottom tuckflap
      save_graphics_state do
        soft_mask do
          fill_color 0,0,0,0
          stroke_color 0,0,0,0
          fill_and_stroke_polygon *measurements[:tuck_flap_masks][:bottom]
        end
        rotate 180, origin: measurements[:reverse_points][23] do
          render_box_face measurements[:reverse_points][62], measurements[:reverse_points][23],
                          data['faces']['front']
        end
      end
    end

    # BACK
    render_box_face measurements[:face_points][:back_upper_left], measurements[:face_points][:back_lower_right],
                    data['faces']['back']
    # BOTTOM
    render_box_face measurements[:face_points][:bottom_upper_left], measurements[:face_points][:bottom_lower_right],
                    data['faces']['bottom']
    ## LEFT SIDE
    render_box_face measurements[:face_points][:left_side_upper_left], measurements[:face_points][:left_side_lower_right],
                    data['faces']['left_side']
    ## Copy LEFT SIDE to the glue flap
    render_box_face measurements[:face_points][:glue_flap_upper_left], measurements[:face_points][:glue_flap_lower_right],
                    data['faces']['left_side']
    ## RIGHT SIDE
    render_box_face measurements[:face_points][:right_side_upper_left], measurements[:face_points][:right_side_lower_right],
                    data['faces']['right_side']
    ## TOP
    render_box_face measurements[:face_points][:top_upper_left], measurements[:face_points][:top_lower_right],
                    data['faces']['top']

    ## SIDE TUCK FLAPS
    # left side
    if fill_color data['faces']['left_side']['background_color']
      fill_color data['faces']['left_side']['background_color']
    end
    fill_polygon measurements[:reverse_points][ 9],
                 measurements[:reverse_points][ 6],
                 measurements[:reverse_points][ 5],
                 measurements[:reverse_points][ 4],
                 measurements[:reverse_points][ 3],
                 measurements[:reverse_points][10]
    # right side
    if fill_color data['faces']['right_side']['background_color']
      fill_color data['faces']['right_side']['background_color']
    end
    fill_polygon measurements[:reverse_points][25],
                 measurements[:reverse_points][26],
                 measurements[:reverse_points][27],
                 measurements[:reverse_points][28],
                 measurements[:reverse_points][21],
                 measurements[:reverse_points][20]
    if data['box']['bottom_style'] == 'tucked'
      # left side
      if fill_color data['faces']['left_side']['background_color']
        fill_color data['faces']['left_side']['background_color']
      end
      fill_polygon measurements[:reverse_points][ 2],
                   measurements[:reverse_points][54],
                   measurements[:reverse_points][55],
                   measurements[:reverse_points][56],
                   measurements[:reverse_points][57],
                   measurements[:reverse_points][13]
      # right side
      if fill_color data['faces']['right_side']['background_color']
        fill_color data['faces']['right_side']['background_color']
      end
      fill_polygon measurements[:reverse_points][24],
                   measurements[:reverse_points][58],
                   measurements[:reverse_points][59],
                   measurements[:reverse_points][60],
                   measurements[:reverse_points][61],
                   measurements[:reverse_points][29]
    else
      # bottom style glued
      # left side
      if fill_color data['faces']['left_side']['background_color']
        fill_color data['faces']['left_side']['background_color']
        stroke_color data['faces']['left_side']['background_color']
      end
      fill_rectangle measurements[:reverse_points][13], measurements[:thickness_in_points], measurements[:thickness_in_points]
      # fill_and_stroke_rectangle measurements[:reverse_points][13], measurements[:thickness_in_points], measurements[:thickness_in_points]
      # right side
      if fill_color data['faces']['right_side']['background_color']
        fill_color data['faces']['right_side']['background_color']
        stroke_color data['faces']['right_side']['background_color']
      end
      fill_rectangle measurements[:reverse_points][29], measurements[:thickness_in_points], measurements[:thickness_in_points]
      # fill_and_stroke_rectangle measurements[:reverse_points][29], measurements[:thickness_in_points], measurements[:thickness_in_points]
      # front
      if fill_color data['faces']['front']['background_color']
        fill_color data['faces']['front']['background_color']
        stroke_color data['faces']['front']['background_color']
      end
      fill_and_stroke_rectangle measurements[:reverse_points][33], measurements[:width_in_points], measurements[:thickness_in_points]
    end


    font_size 10
    fill_color '000000'
    if data['debug_points']
      measurements[:reverse_points].each_with_index do |p, i|
        # puts "Reverse Point #{i} = #{p.inspect}"
        fill_circle p, 3
        draw_text i, at: p
      end
    end
end


Prawn::Document.generate("../boxes/landscape_#{width}#{unit}x#{height}#{unit}x#{thickness}#{unit}_box.pdf",
                           :page_size   => data['box']['page_size'],
                           :print_scaling => :none,
                           :page_layout => data['box']['page_layout']) do
font_families.update "Pacifico"      => { :normal => "../fonts/Pacifico.ttf" },
                     "Engebrechtre"  => { :normal => "../fonts/engebrechtre.regular.ttf",
                                          :italic => "../fonts/engebrechtre.italic.ttf",
                                          :bold   => "../fonts/engebrechtre.bold.ttf" },
                     "IceCream Soda" => { :normal => "../fonts/ICE-CS__.ttf" },
                     "Sarina"        => { :normal => "../fonts/Sarina-Regular.ttf" },
                     "FFF Tusj"      => { :normal => "../fonts/FFF_Tusj.ttf" }

  # how many boxes to draw?
  gutter = EIGHTH_INCH
  num_boxes = (720/(bounding_box_width+gutter)).to_i
  # puts "I think I can fit #{num_boxes} on a page"

  # boxes with the faces/images
  draw_master_edge_ruler_faces

  1.upto(num_boxes) do |num|
    offset = 9.625.in - EIGHTH_INCH * num - num * bounding_box_width
    bounding_box [offset, 0.5.in+bounding_box_height], width: bounding_box_width, height: bounding_box_height do
      stroke_bounds
      draw_box_faces data, measurements
    end
  end

  start_new_page
  # outline box with cut and fold lines
  draw_master_edge_ruler

  1.upto(num_boxes) do |num|
    offset = 0.375.in + EIGHTH_INCH * num + (num - 1) * bounding_box_width
    bounding_box [offset, 0.5.in+bounding_box_height], width: bounding_box_width, height: bounding_box_height do
      draw_box_outline_and_fold_lines info_data, measurements
  #bounding_box [0.5.in,0.5.in+bounding_box_height], width: bounding_box_width, height: bounding_box_height do
      stroke_bounds
    end
  end

end
