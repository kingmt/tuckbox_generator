class GenerateBox < Object

  # Internally all match must be done in 1 unit
  # svg will be generated in only 1 unit
  # picking inchs arbitrarily
PAPER_SIZES_INCH = {
  letter: { width: 8.5, height: 11.0 },
  letter_landscape: { width: 11.0, height: 8.5 }
}

  def svg_header width, height
    svg_header =<<EOSVG
<?xml version="1.0" encoding="UTF-8"?>
<svg
  xmlns="http://www.w3.org/2000/svg"
  xmlns:xlink="http://www.w3.org/1999/xlink"
  width="#{}"
  height="#{}"
  id="svg2">
EOSVG
  end

  def credit_text
    text =<<EOT
This tuckbox was generated by
software written by Michael King.
Source code is available at
http://github.com/kingmt/tuckbox_generator
and is licensed under the GPL

This implementation is inspired by
the generator written by Craig P.
Forbes at http://www.cpforbes.net/tuckbox.

The box is based on a design by
Elliott C. Evans. See his page,
http://www.ee0r.com/boxes/ for
more information and assembly
instructions.

Go to
http://www.tuckbox-generator.net to
generate more box templates.
--Michael
EOT
  end

  def box_math width, height, thickness
  end

  def box_fits_on_paper? paper, box
    paper[:width] - margin > box.total_width &&
      paper[:height] - margin > box.total_width
  end

  def create_box_file paper, box
    File.open "../boxes/#{width}x#{height}x#{thickness}_box.svg",'w' do |f|
      f.puts svg_header
      f.puts "  <g>"
      f.puts "  </g>"
      f.puts "</svg>"
    end
  end
end




class Box < Object
  # givens
  attr_accessor :width, :height, :thickness,
                # boolean
                :tuck_bottom_glued

  GLUE_SIDE_REDUCTION = 0.005
  MINIMUM_TUCK_FLAP = 0.5

  def initializer w, h, t, bottom_glued
    self.width = w
    self.height = h
    self.thickness = t
    self.tuck_bottom_glued = bottom_glued
  end

  def front_back_dimensions
    [width, height]
  end

  def side
    [thickness, height]
  end

  def top_bottom
    [width, thickness]
  end

  def glue_side_dimensions
    [thickness - GLUE_SIDE_REDUCTION,
     height - GLUE_SIDE_REDUCTION ]
  end

  def glue_bottom_side_dimensions
    [thickness - GLUE_SIDE_REDUCTION,
     thickness - GLUE_SIDE_REDUCTION ]
  end

  def glue_bottom_dimensions
    [width - GLUE_SIDE_REDUCTION,
     thickness - GLUE_SIDE_REDUCTION ]
  end

  def total_width
    # side + back + side + front + glue_side
    2 * thickness + 2 * width + glue_side_dimensions.first
  end

  def tuck_flap_dimensions
    # if thickness < minimum_tuck_flap then use minimum_tuckflap
    # if thickness > 2*minimum_tuck_flap then use 2*minimum_tuck_flap
    # else use thickness
    [width, something]
  end

  def total_height
    if tuck_bottom_glued
      # bottom + back + top + tuck_flap
      height + 2 * thickness + tuck_flap_dimensions.last
    else
      # tuck_flap + bottom + back + top + tuck_flap
      height + 2 * thickness + 2 * tuck_flap_dimensions.last
    end
  end
end


